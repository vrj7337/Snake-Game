{"version":3,"sources":["constants.js","App.js","useInterval.js","index.js"],"names":["CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","DIRECTIONS","App","canvasRef","useRef","useState","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameover","createApple","map","_","i","Math","floor","random","checkCollision","piece","snk","segment","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","newSnake","newApple","checkAppleCollision","pop","useEffect","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","role","className","tabIndex","onKeyDown","e","keyCode","moveSnake","onClick","style","border","ref","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89b505bc.chunk.js","sourcesContent":["const CANVAS_SIZE = [700, 700];\r\nconst SNAKE_START = [\r\n  [8, 7],\r\n  [8, 8]\r\n];\r\nconst APPLE_START = [8, 3];\r\nconst SCALE = 40;\r\nconst SPEED = 100;\r\nconst DIRECTIONS = {\r\n  38: [0, -1],\r\n  40: [0, 1], \r\n  37: [-1, 0], \r\n  39: [1, 0] \r\n};\r\n\r\nexport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS\r\n};","import React, {useState, useRef, useEffect} from 'react';\nimport { useInterval } from './useInterval';\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS,\n  APPLE_START\n} from './constants';\nimport './App.css';\n\n\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameover] = useState(false);\n\n\n  const startGame = () => {\n     setSnake(SNAKE_START);\n     setApple(APPLE_START);\n     setDir([0, -1]);\n     setSpeed(SPEED);\n     setGameover(false);\n  }\n\n  const endGame = () => {\n     setSpeed(null);\n     setGameover(true);\n  }\n\n  const moveSnake = ({ keyCode }) => \n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n  \n  const createApple = () => \n     apple.map((_, i) => Math.floor(Math.random() * (CANVAS_SIZE[i]) / SCALE));\n\n  const checkCollision = (piece, snk = snake) => {\n     if(\n       piece[0] * SCALE >=CANVAS_SIZE[0] ||\n       piece[0] < 0 ||\n       piece[1] * SCALE >= CANVAS_SIZE[1] ||\n       piece[1] < 0\n     )\n     return true;\n\n     for(const segment of snk) {\n       if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n     }\n  return false;\n  }\n\n  const checkAppleCollision = newSnake => {\n     if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n       let newApple = createApple();\n       while(checkCollision(newApple, newSnake)) {\n         newApple = createApple();\n       }\n       setApple(newApple);\n       return true;\n     }\n     return false;\n  }\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if(checkCollision(newSnakeHead)) endGame(); \n    if(!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  }\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], window.innerWidth, window.innerHeight);\n    context.fillStyle = \"black\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"black\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver])\n\n  useInterval(() => gameLoop(), speed);\n\n  return (\n   <>\n    <div role=\"button\" className=\"App\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      {gameOver && <div className=\"GO\"><h1>GAME OVER!</h1></div>}\n      <button className =\"button\" onClick={startGame}><h2>Start Game</h2></button>\n      <canvas className =\"canvas\"\n        style = {{border: \"1px solid aqua\"}}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}PX`}\n        />\n        \n        \n    </div>\n   </> \n  )\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}